---
import Layout from '@/layouts/Layout.astro';
import Nav from '@/components/ui/nav.astro';
import {
	Table,
	TableHeader,
	TableBody,
	TableHead,
	TableRow,
	TableCell
} from '@/components/ui/table';

import RadioInventario from '@/components/ui/radiog-inventario';
import {
	ClipboardList,
	Calculator,
	MoveUpRight,
	MoveDownRight
} from 'lucide-react';
import type { VentaData } from '@/components/dashBoard/dashFunctions';

interface Galleta {
	id: number;
	nombre: string;
	stock: number;
	precio: number;
}
interface Perdida {
	id: number;
	nombre: string;
	sales: number;
}

interface TableSalesProps {
	id: number;
	nombre: string;
	stock: number;
	precio: number;
	sales: number;
	total: number;
	ganacias: number;
}

const getInventario = async () => {
	const res = await fetch('http://localhost:3001/galletas');
	const data = await res.json();
	return data as Promise<Galleta[]>;
};
const getPerdidas = async () => {
	const res = await fetch('http://localhost:3001/perdidas');
	const data = await res.json();
	return data as Promise<Perdida[]>;
};

const getVentas = async () => {
	const res = await fetch('http://localhost:3001/venta');
	const data = await res.json();
	return data as Promise<VentaData[]>;
};

const [ventas, inventario, perdidas] = await Promise.all([
	getVentas(),
	getInventario(),
	getPerdidas()
]);

// de ventas unir todas las ventas de un mismo producto y sumarla los totales
const infoVentas: {
	nombre: string;
	ganancias: number;
	cantidad: number;
}[] = [];

ventas.forEach(venta => {
	const index = infoVentas.findIndex(
		infoVenta => infoVenta.nombre === venta.nombre
	);
	if (index === -1) {
		infoVentas.push({
			nombre: venta.nombre,
			ganancias: venta.total,
			cantidad: parseInt(venta.cantidad)
		});
	} else {
		infoVentas[index].ganancias += venta.total;
		infoVentas[index].cantidad += parseInt(venta.cantidad);
	}
});

//unir ventas con inventario y perdidas en una sola tabla en base a nombre
const tableSales: TableSalesProps[] = [];
inventario.forEach(galleta => {
	const index = infoVentas.findIndex(
		infoVenta => infoVenta.nombre === galleta.nombre
	);
	const indexPerdida = perdidas.findIndex(
		perdida => perdida.nombre === galleta.nombre
	);
	if (index === -1) {
		tableSales.push({
			id: galleta.id,
			nombre: galleta.nombre,
			stock: galleta.stock,
			precio: galleta.precio,
			sales: 0,
			total: 0,
			ganacias: 0
		});
	} else {
		tableSales.push({
			id: galleta.id,
			nombre: galleta.nombre,
			stock: galleta.stock,
			precio: galleta.precio,
			sales: perdidas[index].sales,
			total: infoVentas[index].ganancias,
			ganacias:
				infoVentas[index].ganancias +
				galleta.precio * infoVentas[index].cantidad
		});
	}
	if (indexPerdida !== -1) {
		tableSales[tableSales.length - 1].sales +=
			perdidas[indexPerdida].sales;
		tableSales[tableSales.length - 1].total -=
			perdidas[indexPerdida].sales;
		tableSales[tableSales.length - 1].ganacias -=
			perdidas[indexPerdida].sales * galleta.precio;
	}
});
---

<Layout title="Ganancias">
	<Nav />
	<main class="md:mx-4 sm:mx-6 my-6">
		<div
			class="container bg-secondary/20 rounded-lg p-3 sm:p-4 md:p-6"
		>
			<div class="grid grid-cols-12 w-full sm:grid-cols-12">
				<div class="col-span-12">
					<p class="text-[2rem] font-bold text-[#824000] text-center">
						Ganancias
					</p>
				</div>

				<div class="col-start-1 col-span-12">
					<Table>
						<TableHeader className="text-center">
							<TableRow>
								<TableHead>Galleta</TableHead>
								<TableHead>Total de ventas</TableHead>
								<TableHead>
									Ganancias
									<MoveUpRight
										className="inline-block text-green-800"
									/>
								</TableHead>
								<TableHead>
									Perdidas
									<MoveDownRight
										className="inline-block text-red-800"
									/>
								</TableHead>
							</TableRow>
						</TableHeader>
						<TableBody>
							{
								tableSales.map(galleta => (
									<TableRow>
										<TableCell>{galleta.nombre}</TableCell>
										<TableCell>{galleta.total} galletas</TableCell>
										<TableCell>$ {galleta.ganacias} MXN</TableCell>
										<TableCell>{galleta.sales} galletas</TableCell>
									</TableRow>
								))
							}
						</TableBody>
					</Table>
				</div>

				<!-- <div class="col-start-11 col-span-2 ml-5 flex">
					<div class="row-span-1 my-auto">
						<RadioInventario client:idle />

						<Button className="my-4 w-full">
							<ClipboardList className="me-2" />
							 Generar Reporte
						</Button>
						<a href="ganancias/utilidad" class="flex">
							<Button variant={'secondary'} className="w-full">
								<Calculator className="me-2" />
								 Calcular utilidad
							</Button>
						</a>
					</div>
				</div> -->
			</div>
		</div>
	</main>
</Layout>
